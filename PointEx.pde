Data dataObj;

void objMain() {
  objBegin();
  buffer = img;
  for (int y = 0; y < sH; y++) {
    for (int x = 0; x < sW; x++) {
      // FIXME: this loses Z-resolution about tenfold ...
      //       -> should grab the real distance instead...
      color argb = buffer.pixels[y*width+x];
      gray[y][x] = gray(argb);
      if(gray[y][x] > 0) dataObj.add("v " + x + " " + y + " " + gray[y][x]);
    }
  }
  objEnd();
}



//~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

void objBegin() {
  dataObj = new Data();
  dataObj.beginSave();
  //dataObj.add("####");
  //dataObj.add("#");
  //dataObj.add("# OBJ file generated by Meshlab");
  //dataObj.add("#");
  dataObj.add("####");
  //dataObj.add("# Object render_shot1_12.obj");
  dataObj.add("#");
  dataObj.add("# Vertices: "+ countVertices());
  dataObj.add("# Faces: 0");
  dataObj.add("#");
  dataObj.add("####");
}

void objEnd() {
  dataObj.add("# "+ countVertices() +" vertices, 0 vertex normals");
  dataObj.add("");
  dataObj.add("# 0 faces, 0 texture coords");
  dataObj.add("");
  dataObj.add("# End of File");
  dataObj.endSave(filePath + "/" + fileName + zeroPadding(counter+1,imgNames.size()) + "." + fileType);
}

int countVertices(){
  /*
  int counter=0;
  for (int i=0;i<voxel.length;i++) {
    for (int j=0;j<voxel[i].length;j++) {
      for (int k=0;k<voxel[i][j].length;k++) {
        if(voxel[i][j][k].drawMe){
        counter++;
        }
      }
    }
  }
  return counter;
  */
  return sW * sH;
}
